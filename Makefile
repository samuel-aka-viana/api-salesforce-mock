.PHONY: help build up down restart logs status clean populate test shell backup restore

COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = marketing_cloud
BACKUP_DIR = ./backups

GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

.DEFAULT_GOAL := help

help:
	@echo "$(GREEN)Marketing Cloud API - Comandos Dispon√≠veis$(NC)"
	@echo "=================================================="
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(BLUE)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

build:
	@echo "$(YELLOW)üî® Construindo imagens Docker...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache

build-dev:
	@echo "$(YELLOW)üî® Construindo imagem da aplica√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build api

up:
	@echo "$(GREEN)üöÄ Iniciando Marketing Cloud API...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Servi√ßos iniciados!$(NC)"
	@echo "$(BLUE)üìñ API: http://localhost:5000$(NC)"
	@echo "$(BLUE)üóÑÔ∏è  PgAdmin: http://localhost:8080$(NC)"
	@echo "$(BLUE)üîß Redis Commander: http://localhost:8081$(NC)"

up-dev:
	@echo "$(GREEN)üöÄ Iniciando em modo desenvolvimento...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up

up-prod:
	@echo "$(GREEN)üöÄ Iniciando em modo produ√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --profile production up -d

up-tools:
	@echo "$(GREEN)üöÄ Iniciando com ferramentas...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --profile tools up -d

down:
	@echo "$(RED)‚èπÔ∏è  Parando servi√ßos...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down

down-volumes:
	@echo "$(RED)‚èπÔ∏è  Parando servi√ßos e removendo volumes...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v

restart:
	@echo "$(YELLOW)üîÑ Reiniciando servi√ßos...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart

restart-api:
	@echo "$(YELLOW)üîÑ Reiniciando API...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart api

logs:
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-api:
	docker-compose -f $(COMPOSE_FILE) logs -f api

logs-db:
	docker-compose -f $(COMPOSE_FILE) logs -f postgres

logs-redis:
	docker-compose -f $(COMPOSE_FILE) logs -f redis

status: #
	@echo "$(BLUE)üìä Status dos Servi√ßos:$(NC)"
	docker-compose -f $(COMPOSE_FILE) ps
	@echo "\n$(BLUE)üíæ Uso de Volumes:$(NC)"
	docker volume ls | grep $(PROJECT_NAME)
	@echo "\n$(BLUE)üåê Redes:$(NC)"
	docker network ls | grep $(PROJECT_NAME)

health:
	@echo "$(BLUE)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@curl -s http://localhost:5000/health | jq '.' || echo "API n√£o est√° respondendo"
	@docker-compose -f $(COMPOSE_FILE) exec postgres pg_isready || echo "PostgreSQL n√£o est√° pronto"
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli ping || echo "Redis n√£o est√° respondendo"

populate:
	@echo "$(GREEN)üìä Populando banco de dados...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api python populate_data.py

populate-force:
	@echo "$(GREEN)üìä Populando banco de dados (limpeza for√ßada)...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api python -c "import os; os.environ['FORCE_POPULATE'] = 'true'; exec(open('populate_data.py').read())"

backup:
	@echo "$(YELLOW)üíæ Fazendo backup do banco...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	docker-compose -f $(COMPOSE_FILE) exec -T postgres pg_dump -U marketing_user marketing_cloud_db > $(BACKUP_DIR)/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup conclu√≠do!$(NC)"

restore:
	@echo "$(YELLOW)üîÑ Restaurando backup...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then echo "$(RED)‚ùå Use: make restore BACKUP_FILE=arquivo.sql$(NC)"; exit 1; fi
	docker-compose -f $(COMPOSE_FILE) exec -T postgres psql -U marketing_user -d marketing_cloud_db < $(BACKUP_FILE)
	@echo "$(GREEN)‚úÖ Restore conclu√≠do!$(NC)"

shell:
	docker-compose -f $(COMPOSE_FILE) exec api bash

shell-db:
	docker-compose -f $(COMPOSE_FILE) exec postgres psql -U marketing_user -d marketing_cloud_db

shell-redis:
	docker-compose -f $(COMPOSE_FILE) exec redis redis-cli

python-shell:
	docker-compose -f $(COMPOSE_FILE) exec api python -c "from app import *; import IPython; IPython.start_ipython(argv=[])"

test:
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api python -m pytest tests/ -v

test-coverage:
	@echo "$(BLUE)üß™ Executando testes com coverage...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api python -m pytest tests/ --cov=. --cov-report=html

lint:
	@echo "$(BLUE)üîç Verificando qualidade do c√≥digo...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api flake8 . --max-line-length=120
	docker-compose -f $(COMPOSE_FILE) exec api black --check .

format:
	@echo "$(BLUE)‚ú® Formatando c√≥digo...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api black .
	docker-compose -f $(COMPOSE_FILE) exec api isort .

clean:
	@echo "$(RED)üßπ Limpando containers e imagens...$(NC)"
	docker system prune -f
	docker volume prune -f

clean-all:
	@echo "$(RED)üßπ Limpeza completa...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v --rmi all --remove-orphans
	docker system prune -a -f
	docker volume prune -f
	docker network prune -f

reset:
	@echo "$(RED)üîÑ Reset completo do projeto...$(NC)"
	$(MAKE) down-volumes
	$(MAKE) clean-all
	$(MAKE) build
	$(MAKE) up
	$(MAKE) populate

deploy:
	@echo "$(GREEN)üöÄ Deploy para produ√ß√£o...$(NC)"
	$(MAKE) build
	$(MAKE) up-prod
	@echo "$(GREEN)‚úÖ Deploy conclu√≠do!$(NC)"

migrate:
	@echo "$(BLUE)üóÑÔ∏è  Executando migra√ß√µes...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec api python -c "from app import db; db.create_all(); print('Migra√ß√µes conclu√≠das!')"

stats:
	@echo "$(BLUE)üìà Estat√≠sticas de Recursos:$(NC)"
	docker stats --no-stream $(shell docker-compose -f $(COMPOSE_FILE) ps -q)

top:
	@echo "$(BLUE)‚ö° Processos nos Containers:$(NC)"
	docker-compose -f $(COMPOSE_FILE) top

inspect:
	docker-compose -f $(COMPOSE_FILE) config

env-check:
	@echo "$(BLUE)üîß Verificando vari√°veis de ambiente...$(NC)"
	@if [ -f .env ]; then echo "$(GREEN)‚úÖ Arquivo .env encontrado$(NC)"; else echo "$(RED)‚ùå Arquivo .env n√£o encontrado$(NC)"; fi
	@echo "$(BLUE)Principais vari√°veis:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec api python -c "import os; print('DATABASE_URL:', os.environ.get('DATABASE_URL', 'N√ÉO DEFINIDA')); print('REDIS_URL:', os.environ.get('REDIS_URL', 'N√ÉO DEFINIDA'))"

ports:
	@echo "$(BLUE)üåê Portas dos Servi√ßos:$(NC)"
	@echo "API: 5000"
	@echo "PostgreSQL: 5432"
	@echo "Redis: 6379"
	@echo "PgAdmin: 8080"
	@echo "Redis Commander: 8081"
	@echo "Nginx: 80, 443"

urls:
	@echo "$(BLUE)üîó URLs dos Servi√ßos:$(NC)"
	@echo "$(GREEN)API:$(NC) http://localhost:5000"
	@echo "$(GREEN)API Docs:$(NC) http://localhost:5000/v1"
	@echo "$(GREEN)Health Check:$(NC) http://localhost:5000/health"
	@echo "$(GREEN)PgAdmin:$(NC) http://localhost:8080"
	@echo "$(GREEN)Redis Commander:$(NC) http://localhost:8081"

demo:
	@echo "$(GREEN)üé≠ Executando demonstra√ß√£o completa...$(NC)"
	$(MAKE) up
	sleep 30
	$(MAKE) populate
	@echo "$(GREEN)üéâ Demonstra√ß√£o pronta!$(NC)"
	@echo "$(BLUE)Acesse: http://localhost:5000/v1$(NC)"

quick-start:
	@echo "$(GREEN)‚ö° In√≠cio r√°pido...$(NC)"
	$(MAKE) build
	$(MAKE) up
	sleep 30
	$(MAKE) populate
	$(MAKE) urls